{"version":3,"sources":["api/api.ts","utils/errorHandler.ts","store/app-reducer.ts","store/auth-reducer.ts","App/AppMenu.tsx","store/todolist-reducer.ts","Components/Common/AddItemForm/AddItemForm.tsx","Components/Common/EditableSpan/EditableSpan.tsx","store/task-reducer.ts","Components/Todolists/TodoList/Task/Task.tsx","Components/Todolists/TodoList/Todolist.tsx","Components/Todolists/Todolists.tsx","Components/Common/ErrorSnackbar/ErrorSnackbar.tsx","Components/Common/ComplitedSnackbar/ComplitedSnackbar.tsx","Components/Login/Login.tsx","App/App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","Components/Login/Login.module.css","Components/Todolists/TodoList/Todolist.module.css"],"names":["TaskStatuses","ServerResponses","TaskPriorities","instanse","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","put","delete","taskAPI","taskId","newTaskData","authAPI","data","handleServerAppError","error","dispatch","messages","length","setError","setAppStatus","handleServerNetworkError","message","initialState","status","isInitialized","type","authMe","then","response","resultCode","Success","setIsLoggedIn","catch","isLoggedIn","value","AppMenu","props","useDispatch","logoutHandler","useCallback","Toolbar","style","justifyContent","IconButton","color","Menu","Typography","variant","Button","onClick","changeFilterAC","todolistID","changeTodolistEntityStatus","AddItemForm","React","memo","useState","setTitle","height","TextField","onChange","e","currentTarget","onKeyPress","key","addItem","label","placeholder","helperText","disabled","trimmedTitle","trim","AddBox","EditableSpan","editMode","setEditMode","offEditMode","onChangeTitle","autoFocus","onBlur","display","minWidth","onDoubleClick","changeTaskEntityStatus","taskID","Task","removeTask","task","id","removeTaskAC","changeStatus","newIsDone","checked","Completed","New","getState","tasks","find","t","description","deadline","startDate","priority","changeStatusAC","changeTitle","newTitle","changeTaskTitleAC","className","Checkbox","entityTaskStatus","Delete","Todolist","useSelector","state","todolist","useEffect","setTasks","items","tasksForTodolist","filter","renderTasks","map","onClickAll","onClickActive","onClickCompleted","deleteTodolist","removeTodolistAC","item","addTask","changeTodolistTitle","todolists","tl","changeTodolistTitleAC","Paper","elevation","S","entityStatus","task_box","Todolists","auth","onClickAddTodolist","addTodolist","todolistItems","Grid","container","padding","spacing","to","Alert","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","ComplitedSnackbar","Login","setOpen","handleTooltip","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","login_container","paper","xs","testData","Tooltip","PopperProps","disablePortal","disableFocusListener","disableHoverListener","disableTouchListener","placement","Info","handleSubmit","FormControl","Fingerprint","FormGroup","field","margin","getFieldProps","handleBlur","touched","FormControlLabel","control","checkbox","App","AppBar","position","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","todoListId","tasksCopy","forEach","copyTodolists","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ca1e249f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instanse = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"4fe92c3a-1b95-46fb-8296-15a97f910aa4\"\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: D\r\n}\r\n\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instanse.get<TodolistType[]>(\"todo-lists\")\r\n    },\r\n    addTodolist(title: string) {\r\n        return instanse.post<ResponseType<{item: TodolistType}>>(\"todo-lists\", {title})\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instanse.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    removeTodolist(todolistId: string) {\r\n        return instanse.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    }\r\n}\r\ntype GetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type TaskType = UpdateTaskType & {\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum ServerResponses {\r\n    Success = 0,\r\n    Error = 1,\r\n    captchaSuccess = 10\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\ntype UpdateTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport const taskAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instanse.get<GetTasksType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    addTask(todolistId: string, title: string) {\r\n        return instanse.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, newTaskData: UpdateTaskType) {\r\n        return instanse.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, newTaskData)\r\n    },\r\n    removeTask(todolistId: string, taskId: string) {\r\n        return instanse.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\nexport type AuthDataType = {\r\n    id: number,\r\n    login: string,\r\n    email: string\r\n}\r\n\r\nexport type LoginRequestType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instanse.get<ResponseType<AuthDataType>>(`auth/me`)\r\n    },\r\n    login(data: LoginRequestType) {\r\n        return instanse.post<ResponseType<{userId: number}>>(`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instanse.delete<ResponseType>(`auth/login`)\r\n    }\r\n}","import {Dispatch} from \"redux\"\r\nimport {AppReducerActionsType, setAppStatus, setError} from \"../store/app-reducer\";\r\nimport {ResponseType} from \"../api/api\"\r\n\r\nexport const handleServerAppError = <T>(error: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if(error.messages.length) {\r\n        dispatch(setError(error.messages[0]))\r\n    } else {\r\n        dispatch(setError(\"Some error\"))\r\n    }\r\n    dispatch(setAppStatus(\"failed\"))\r\n}\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setError(error.message))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<AppReducerActionsType>","import {AppThunk} from \"./store\";\r\nimport {authAPI, ServerResponses} from \"../api/api\";\r\nimport {setIsLoggedIn} from \"./auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errorHandler\";\r\nimport {changeTodolistEntityStatus} from \"./todolist-reducer\";\r\n\r\nconst initialState = {\r\n    status: \"idle\" as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppReducerActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-INITIALIZED\":\r\n            return {...state, isInitialized: true}\r\n        default: return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: \"APP/SET-STATUS\", status} as const)\r\nexport const setError = (error: string) => ({type: \"APP/SET-ERROR\", error} as const)\r\nexport const setInitialized = () => ({type: \"APP/SET-INITIALIZED\"} as const)\r\n\r\n// thunk\r\nexport const authMe = (): AppThunk => dispatch => {\r\n    authAPI.authMe()\r\n        .then(response => {\r\n            if (response.data.resultCode === ServerResponses.Success) {\r\n                dispatch(setIsLoggedIn(true));\r\n                dispatch(setInitialized())\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n                dispatch(setInitialized())\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\n\r\n// types\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type AppReducerActionsType =\r\n    ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setError>\r\n    | ReturnType<typeof setIsLoggedIn>\r\n    | ReturnType<typeof setInitialized>","import {authMe, setAppStatus} from \"./app-reducer\";\r\nimport {AppThunk} from \"./store\";\r\nimport {authAPI, LoginRequestType, ServerResponses} from \"../api/api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errorHandler\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthReducerActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"LOGIN/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        default: return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedIn = (value: boolean) => ({type: \"LOGIN/SET-IS-LOGGED-IN\", value} as const)\r\n\r\n// thunks\r\nexport const login = (data: LoginRequestType): AppThunk => dispatch => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.login(data)\r\n        .then(response => {\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(authMe())\r\n                dispatch(setAppStatus(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logout = (): AppThunk => dispatch => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if(response.data.resultCode === ServerResponses.Success) {\r\n                dispatch(setIsLoggedIn(false))\r\n                dispatch(setAppStatus(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type AuthReducerActionsType = ReturnType<typeof setIsLoggedIn>","import React, {useCallback} from \"react\";\r\nimport {Button, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logout} from \"../store/auth-reducer\";\r\n\r\ntype AppMenuPropsType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nexport const AppMenu: React.FC<AppMenuPropsType> = props => {\r\n    const dispatch = useDispatch()\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logout())\r\n    }, [])\r\n\r\n    return (\r\n        <Toolbar style={{justifyContent: \"space-between\"}}>\r\n            <IconButton color={\"inherit\"}>\r\n                <Menu/>\r\n            </IconButton>\r\n            <Typography variant={\"h6\"}>TODOLISTS</Typography>\r\n            {props.isLoggedIn && <Button onClick={logoutHandler} color={\"inherit\"} variant={\"outlined\"}>Log out</Button>}\r\n        </Toolbar>\r\n    )\r\n}","import {ServerResponses, todolistAPI, TodolistType} from \"../api/api\";\r\nimport {AppThunk} from \"./store\";\r\nimport {RequestStatusType, setAppStatus} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errorHandler\";\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistsReducer = (todolists = initialState, action: TodolistActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case \"TODOLIST/REMOVE-TODOLIST\": {\r\n            return todolists.filter(tl => tl.id !== action.todolistID)\r\n        }\r\n        case \"TODOLIST/ADD-TODOLIST\": {\r\n            return [...todolists, {...action.todolist, filter: \"all\", entityStatus: \"idle\"}]\r\n        }\r\n        case \"TODOLIST/CHANGE-TODOLIST-TITLE\": {\r\n            let copyTodolists = [...todolists]\r\n            let todolist = copyTodolists.find(tl => tl.id === action.todolistID)\r\n            todolist && (todolist.title = action.newTitle)\r\n            return copyTodolists\r\n        }\r\n        case \"TODOLIST/CHANGE-FILTER\": {\r\n            return todolists.map(tl => tl.id === action.todolistID ? {...tl, filter: action.value} : tl)\r\n        }\r\n        case \"TODOLIST/SET-TODOLIST\": {\r\n            return action.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        }\r\n        case \"TODOLIST/SET-TODOLIST-STATUS\": {\r\n            let copyTodolists = [...todolists]\r\n            let todolist = copyTodolists.find(tl => tl.id === action.todolistID)\r\n            todolist && (todolist.entityStatus = action.status)\r\n            return copyTodolists\r\n        }\r\n        default:\r\n            return todolists\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (todolistID: string) =>\r\n    ({type: \"TODOLIST/REMOVE-TODOLIST\", todolistID} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: \"TODOLIST/ADD-TODOLIST\", todolist} as const)\r\nexport const changeTodolistTitleAC = (newTitle: string, todolistID: string) =>\r\n    ({type: \"TODOLIST/CHANGE-TODOLIST-TITLE\", newTitle, todolistID} as const)\r\nexport const changeFilterAC = (value: FilterTaskType, todolistID: string) =>\r\n    ({type: \"TODOLIST/CHANGE-FILTER\", value, todolistID} as const)\r\nexport const setTodolists = (todolists: TodolistType[]) =>\r\n    ({type: \"TODOLIST/SET-TODOLIST\", todolists} as const)\r\nexport const changeTodolistEntityStatus = (todolistID: string, status: RequestStatusType) =>\r\n    ({type: \"TODOLIST/SET-TODOLIST-STATUS\", todolistID, status} as const)\r\n\r\n// thunks\r\nexport const getTodolists = (): AppThunk => dispatch => {\r\n    dispatch(setAppStatus(\"loading\"))\r\n    todolistAPI.getTodolists()\r\n        .then(response => {\r\n            dispatch(setTodolists(response.data))\r\n            dispatch(setAppStatus(\"succeeded\"))\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const addTodolist = (title: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatus(\"loading\"))\r\n    todolistAPI.addTodolist(title)\r\n        .then(response => {\r\n            if(response.data.resultCode === ServerResponses.Success) {\r\n                dispatch(addTodolistAC(response.data.data.item))\r\n                dispatch(setAppStatus(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTodolist = (todolistID: string): AppThunk => dispatch => {\r\n    dispatch(setAppStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(todolistID, \"loading\"))\r\n    todolistAPI.removeTodolist(todolistID)\r\n        .then(response => {\r\n            if(response.data.resultCode === ServerResponses.Success) {\r\n                dispatch(removeTodolistAC(todolistID))\r\n                dispatch(setAppStatus(\"succeeded\"))\r\n                dispatch(changeTodolistEntityStatus(todolistID, \"succeeded\"))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n                dispatch(changeTodolistEntityStatus(todolistID, \"failed\"))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTodolistTitle = (todolistID: string, title: string): AppThunk =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatus(\"loading\"))\r\n        const todolist = getState().todolists.find(tl => tl.id === todolistID)\r\n        todolist && todolistAPI.updateTodolist(todolistID, title)\r\n            .then(response => {\r\n                if(response.data.resultCode === ServerResponses.Success) {\r\n                    dispatch(changeTodolistTitleAC(title, todolistID))\r\n                    dispatch(setAppStatus(\"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(response.data, dispatch)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type TodolistActionsType =\r\n    ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeFilterAC>\r\n    | ReturnType<typeof setTodolists>\r\n    | ReturnType<typeof changeTodolistEntityStatus>\r\n    | ReturnType<typeof setAppStatus>\r\n\r\nexport type FilterTaskType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterTaskType\r\n    entityStatus: RequestStatusType\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n    placeholder: string\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n    const addItemClick = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n            setError(null)\r\n        } else {\r\n            setError(\"Title is required!!!\")\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n    return (\r\n        <div style={{height: \"80px\"}}>\r\n            <TextField\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPress}\r\n                label={props.placeholder}\r\n                variant=\"outlined\"\r\n                helperText={error}\r\n                error={!!error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton onClick={addItemClick} disabled={props.disabled}>\r\n                <AddBox color={props.disabled ? \"disabled\" : \"primary\"} />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChangeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => {\r\n        !props.disabled && setEditMode(true)\r\n    }\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        props.onChangeTitle(title)\r\n    }, [title, props])\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n              />\r\n            : <div style={{display: \"inline-block\", minWidth: \"50px\"}} onDoubleClick={onEditMode}>\r\n                {props.title}</div>\r\n    );\r\n})","import {addTodolistAC, changeTodolistEntityStatus, removeTodolistAC, setTodolists} from \"./todolist-reducer\";\r\nimport {ServerResponses, taskAPI, TaskStatuses, TaskType} from \"../api/api\";\r\nimport {AppThunk} from \"./store\";\r\nimport {RequestStatusType, setAppStatus, setError} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/errorHandler\";\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (tasks = initialState, action: TaskActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"TASK/REMOVE-TASK\":\r\n            return {...tasks, [action.todolistID]: tasks[action.todolistID]\r\n                    .filter(t => t.id !== action.taskID)}\r\n        case \"TASK/ADD-TASK\":\r\n            return {...tasks, [action.task.todoListId]: [\r\n                    {...action.task, entityTaskStatus: \"idle\"}, ...tasks[action.task.todoListId]\r\n                ]}\r\n        case \"TASK/CHANGE-STATUS\":\r\n            return {...tasks, [action.todolistID]: [...tasks[action.todolistID]]\r\n                    .map(t => t.id === action.taskID ? {...t, status: action.status} : t)}\r\n        case \"TASK/CHANGE-TASK-TITLE\":\r\n            return {...tasks, [action.todolistID]: [...tasks[action.todolistID]\r\n                    .map(t => t.id === action.taskID ? {...t, title: action.newTitle} : t)]}\r\n        case \"TODOLIST/REMOVE-TODOLIST\":\r\n            let tasksCopy = {...tasks}\r\n            delete (tasksCopy[action.todolistID])\r\n            return tasksCopy\r\n        case \"TODOLIST/ADD-TODOLIST\":\r\n            return {...tasks, [action.todolist.id]: []}\r\n        case \"TODOLIST/SET-TODOLIST\": {\r\n            let tasksCopy = {...tasks}\r\n            action.todolists.forEach(tl => tasksCopy[tl.id] = [])\r\n            return tasksCopy\r\n        }\r\n        case \"TASK/SET-TASKS\":\r\n            return {...tasks, [action.todolistID]: [...action.tasks]\r\n                    .map(t => ({...t, entityTaskStatus: \"idle\"}))}\r\n        case \"TASK/CHANGE-ENTITY-STATUS\":\r\n            return {...tasks, [action.todolistID]: [...tasks[action.todolistID]]\r\n                    .map(t => t.id === action.taskID ? {...t, entityTaskStatus: action.status} : t)}\r\n        default:\r\n            return tasks\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskID: string, todolistID: string) =>\r\n    ({type: \"TASK/REMOVE-TASK\", taskID, todolistID} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: \"TASK/ADD-TASK\", task} as const)\r\nexport const changeStatusAC = (taskID: string, status: TaskStatuses, todolistID: string) =>\r\n    ({type: \"TASK/CHANGE-STATUS\", taskID, status, todolistID} as const)\r\nexport const changeTaskTitleAC = (newTitle: string, taskID: string, todolistID: string) =>\r\n    ({type: \"TASK/CHANGE-TASK-TITLE\", newTitle, taskID, todolistID} as const)\r\nexport const setTasks = (tasks: TaskType[], todolistID: string) =>\r\n    ({type: \"TASK/SET-TASKS\", tasks, todolistID} as const)\r\nexport const changeTaskEntityStatus = (todolistID: string, taskID: string, status: RequestStatusType) =>\r\n    ({type: \"TASK/CHANGE-ENTITY-STATUS\", todolistID, taskID, status} as const)\r\n\r\n// thunks\r\nexport const getTasks = (todolistID: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatus(\"loading\"))\r\n    taskAPI.getTasks(todolistID)\r\n        .then(response => {\r\n            dispatch(setTasks(response.data.items, todolistID))\r\n            dispatch(setAppStatus(\"succeeded\"))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setError(error.message))\r\n            dispatch(setAppStatus(\"failed\"))\r\n        })\r\n}\r\nexport const addTask = (todolistID: string, title: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(todolistID, \"loading\"))\r\n    taskAPI.addTask(todolistID, title)\r\n        .then(response => {\r\n            debugger\r\n            if(response.data.resultCode === ServerResponses.Success) {\r\n                dispatch(addTaskAC(response.data.data.item))\r\n                dispatch(changeTodolistEntityStatus(todolistID, \"succeeded\"))\r\n                dispatch(setAppStatus(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n                dispatch(changeTodolistEntityStatus(todolistID, \"failed\"))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTodolistEntityStatus(todolistID, \"failed\"))\r\n        })\r\n}\r\nexport const deleteTask = (todolistID: string, taskID: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatus(\"loading\"))\r\n    dispatch(changeTodolistEntityStatus(todolistID, \"loading\"))\r\n    dispatch(changeTaskEntityStatus(todolistID, taskID, \"loading\"))\r\n    taskAPI.removeTask(todolistID, taskID)\r\n        .then(response => {\r\n            if(response.data.resultCode === ServerResponses.Success) {\r\n                dispatch(removeTaskAC(taskID, todolistID))\r\n                dispatch(setAppStatus(\"succeeded\"))\r\n                dispatch(changeTodolistEntityStatus(todolistID, \"succeeded\"))\r\n                dispatch(changeTaskEntityStatus(todolistID, taskID, \"succeeded\"))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n                dispatch(changeTodolistEntityStatus(todolistID, \"failed\"))\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n            dispatch(changeTodolistEntityStatus(todolistID, \"failed\"))\r\n        })\r\n}\r\nexport const updateTaskStatus = (todolistID: string, taskID: string, status: TaskStatuses): AppThunk =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatus(\"loading\"))\r\n        dispatch(changeTodolistEntityStatus(todolistID, \"loading\"))\r\n        dispatch(changeTaskEntityStatus(todolistID, taskID, \"loading\"))\r\n        const task = getState().tasks[todolistID].find(t => t.id === taskID)\r\n        if(task) {\r\n            taskAPI.updateTask(todolistID, taskID, {\r\n                title: task.title,\r\n                status,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                startDate: task.startDate,\r\n                priority: task.priority\r\n            }).then(response => {\r\n                if(response.data.resultCode === ServerResponses.Success) {\r\n                    dispatch(changeStatusAC(taskID, status, todolistID))\r\n                    dispatch(changeTodolistEntityStatus(todolistID, \"succeeded\"))\r\n                    dispatch(changeTaskEntityStatus(todolistID, taskID, \"succeeded\"))\r\n                    dispatch(setAppStatus(\"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(response.data, dispatch)\r\n                    dispatch(changeTodolistEntityStatus(todolistID, \"failed\"))\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTodolistEntityStatus(todolistID, \"failed\"))\r\n            })\r\n        }\r\n    }\r\nexport const updateTaskTitle = (todolistID: string, taskID: string, title: string): AppThunk =>\r\n    (dispatch, getState) => {\r\n        dispatch(setAppStatus(\"loading\"))\r\n        dispatch(changeTodolistEntityStatus(todolistID, \"loading\"))\r\n        dispatch(changeTaskEntityStatus(todolistID, taskID, \"loading\"))\r\n        const task = getState().tasks[todolistID].find(t => t.id === taskID)\r\n        if(task) {\r\n            taskAPI.updateTask(todolistID, taskID, {\r\n                title,\r\n                status: task.status,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                startDate: task.startDate,\r\n                priority: task.priority\r\n            }).then(response => {\r\n                if(response.data.resultCode === ServerResponses.Success) {\r\n                    dispatch(changeTaskTitleAC(title, taskID, todolistID))\r\n                    dispatch(changeTodolistEntityStatus(todolistID, \"succeeded\"))\r\n                    dispatch(changeTaskEntityStatus(todolistID, taskID, \"succeeded\"))\r\n                    dispatch(setAppStatus(\"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(response.data, dispatch)\r\n                    dispatch(changeTodolistEntityStatus(todolistID, \"failed\"))\r\n                }\r\n            }).catch(error => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTodolistEntityStatus(todolistID, \"failed\"))\r\n            })\r\n        }\r\n    }\r\n\r\n// types\r\nexport type TaskActionsType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof setTodolists>\r\n    | ReturnType<typeof setTasks>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ChangeEntityStatusType\r\n\r\nexport type ChangeEntityStatusType =\r\n    ReturnType<typeof changeTodolistEntityStatus>\r\n    | ReturnType<typeof changeTaskEntityStatus>\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityTaskStatus: RequestStatusType\r\n}\r\n\r\nexport type TaskStateType = {[key: string]: Array<TaskDomainType>}","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../Common/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {deleteTask, updateTaskStatus, updateTaskTitle} from \"../../../../store/task-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/api\";\r\nimport {RequestStatusType} from \"../../../../store/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    todolistID: string\r\n    task: TaskType\r\n    entityTaskStatus: RequestStatusType\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(() => {\r\n        dispatch(deleteTask(props.todolistID, props.task.id))\r\n    }, [dispatch, props.task.id, props.todolistID])\r\n\r\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDone = e.currentTarget.checked\r\n        dispatch(updateTaskStatus(props.todolistID, props.task.id, newIsDone ? TaskStatuses.Completed : TaskStatuses.New))\r\n    }, [dispatch, props.task.id, props.todolistID])\r\n\r\n    const changeTitle = useCallback((newTitle: string) => {\r\n        dispatch(updateTaskTitle(props.todolistID, props.task.id, newTitle))\r\n    }, [dispatch, props.task.id, props.todolistID])\r\n\r\n    return (\r\n        <li className={props.task.status ? \"is-done\" : \"\"}>\r\n            <Checkbox color={\"primary\"} disabled={props.entityTaskStatus === \"loading\"}\r\n                      onChange={changeStatus} checked={props.task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan title={props.task.title} onChangeTitle={changeTitle}\r\n                          disabled={props.entityTaskStatus === \"loading\"}/>\r\n            <IconButton onClick={removeTask} disabled={props.entityTaskStatus === \"loading\"}>\r\n                <Delete color={props.entityTaskStatus === \"loading\" ? \"disabled\" : \"primary\"}/>\r\n            </IconButton>\r\n        </li>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../Common/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../Common/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton, Paper} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {addTask, getTasks, TaskDomainType} from \"../../../store/task-reducer\";\r\nimport {changeFilterAC, removeTodolist, TodolistDomainType, updateTodolistTitle} from \"../../../store/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../store/store\";\r\nimport {TaskStatuses} from \"../../../api/api\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {RequestStatusType} from \"../../../store/app-reducer\";\r\nimport S from \"./Todolist.module.css\"\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    const tasks = useSelector<AppStateType, Array<TaskDomainType>>(state => state.tasks[props.todolist.id])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasks(props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    } else if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderTasks = tasksForTodolist\r\n        .map(t => <Task key={t.id} task={t} todolistID={props.todolist.id} entityTaskStatus={t.entityTaskStatus}/>)\r\n\r\n    //---callbacks---//\r\n    const onClickAll = useCallback(() => {\r\n        dispatch(changeFilterAC(\"all\", props.todolist.id))\r\n    }, [dispatch, props.todolist.id]);\r\n\r\n    const onClickActive = useCallback(() => {\r\n        dispatch(changeFilterAC(\"active\", props.todolist.id))\r\n    }, [dispatch, props.todolist.id]);\r\n\r\n    const onClickCompleted = useCallback(() => {\r\n        dispatch(changeFilterAC(\"completed\", props.todolist.id))\r\n    }, [dispatch, props.todolist.id]);\r\n\r\n    const deleteTodolist = useCallback(() => {\r\n        dispatch(removeTodolist(props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const addItem = useCallback((title: string) => {\r\n        dispatch(addTask(props.todolist.id, title))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        dispatch(updateTodolistTitle(props.todolist.id, newTitle))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    return (\r\n        <Paper elevation={10} className={S.todolist}>\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan title={props.todolist.title} onChangeTitle={changeTodolistTitle}\r\n                                  disabled={props.entityStatus === \"loading\"}/>\r\n                    <IconButton onClick={deleteTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm placeholder={\"Task title\"} addItem={addItem} disabled={props.entityStatus === \"loading\"}/>\r\n                <div className={S.task_box}>\r\n                    <ul>{renderTasks}</ul>\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        onClick={onClickAll}\r\n                        variant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"}\r\n                        color={\"primary\"}\r\n                    >All</Button>\r\n                    <Button\r\n                        onClick={onClickActive}\r\n                        variant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"}\r\n                        color={\"primary\"}\r\n                    >Active</Button>\r\n                    <Button\r\n                        onClick={onClickCompleted}\r\n                        variant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"}\r\n                        color={\"primary\"}\r\n                    >Completed</Button>\r\n                </div>\r\n            </div>\r\n        </Paper>\r\n    );\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../store/store\";\r\nimport {addTodolist, getTodolists, TodolistDomainType} from \"../../store/todolist-reducer\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {Todolist} from \"./TodoList/Todolist\";\r\nimport {AddItemForm} from \"../Common/AddItemForm/AddItemForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Todolists: React.FC = React.memo(() => {\r\n    const todolists = useSelector<AppStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(getTodolists())\r\n    }, [dispatch])\r\n\r\n    const onClickAddTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolist(title))\r\n    }, [dispatch])\r\n\r\n    const todolistItems = todolists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Todolist todolist={tl} entityStatus={tl.entityStatus}/>\r\n            </Grid>\r\n        );\r\n    })\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px 0\"}}>\r\n                <AddItemForm placeholder={\"Todolist title\"} addItem={onClickAddTodolist} />\r\n            </Grid>\r\n            <Grid container spacing={3} >\r\n               {todolistItems}\r\n            </Grid>\r\n        </>\r\n    )\r\n})","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setAppStatus} from \"../../../store/app-reducer\";\r\nimport {AppStateType} from \"../../../store/store\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppStatus(\"idle\"))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setAppStatus} from \"../../../store/app-reducer\";\r\nimport {AppStateType} from \"../../../store/store\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ComplitedSnackbar() {\r\n    const status = useSelector<AppStateType, string | null>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppStatus(\"idle\"))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={status === \"succeeded\"} autoHideDuration={2000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"success\">\r\n                Success Motherfucker))\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    Grid,\r\n    IconButton,\r\n    TextField,\r\n    Tooltip\r\n} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../store/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {login} from \"../../store/auth-reducer\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport S from \"./Login.module.css\";\r\nimport {Fingerprint, Info} from \"@material-ui/icons\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const text = `Test Email: free@samuraijs.com Test Password: free`\r\n    const handleTooltip = () => {\r\n        setOpen(!open);\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is equired';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is equired';\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Password has been 6+ symbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(login(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n    return (\r\n        <Grid container className={S.login_container}>\r\n            <Paper elevation={6} className={S.paper}>\r\n                <Grid item xs={4}>\r\n                    <div className={S.testData}>\r\n                        <Tooltip\r\n                            PopperProps={{\r\n                                disablePortal: true,\r\n                            }}\r\n                            open={open}\r\n                            disableFocusListener\r\n                            disableHoverListener\r\n                            disableTouchListener\r\n                            title={text}\r\n                            onBlur={handleTooltip}\r\n                            placement=\"right-start\"\r\n                        >\r\n                            <IconButton onClick={handleTooltip}>\r\n                                <Info/>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </div>\r\n                    <form onSubmit={formik.handleSubmit} className={S.item}>\r\n                        <FormControl>\r\n                            <div className={S.title}>\r\n                                <h2>Login</h2>\r\n                                <Fingerprint/>\r\n                            </div>\r\n                            <FormGroup>\r\n                                <div className={S.field}>\r\n                                    <TextField\r\n                                        label=\"Email\"\r\n                                        margin=\"normal\"\r\n                                        {...formik.getFieldProps(\"email\")}\r\n                                        onBlur={formik.handleBlur}\r\n                                        helperText={formik.errors.email}\r\n                                        error={formik.touched.email && !!formik.errors.email}\r\n                                    />\r\n                                </div>\r\n                                <div className={S.field}>\r\n                                    <TextField\r\n                                        type=\"password\"\r\n                                        label=\"Password\"\r\n                                        margin=\"normal\"\r\n                                        {...formik.getFieldProps(\"password\")}\r\n                                        helperText={formik.errors.password}\r\n                                        error={formik.touched.password && !!formik.errors.password}\r\n                                    />\r\n                                </div>\r\n                                <FormControlLabel\r\n                                    label={'Remember me'}\r\n                                    control={<Checkbox\r\n                                        color={\"primary\"}\r\n                                        {...formik.getFieldProps(\"rememberMe\")}\r\n                                    />}\r\n                                    className={S.checkbox}\r\n                                />\r\n                                <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {AppBar, CircularProgress, Container, LinearProgress} from \"@material-ui/core\";\nimport {AppMenu} from \"./AppMenu\";\nimport {Todolists} from \"../Components/Todolists/Todolists\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../store/store\";\nimport {authMe, RequestStatusType} from \"../store/app-reducer\";\nimport {ErrorSnackbar} from \"../Components/Common/ErrorSnackbar/ErrorSnackbar\";\nimport {ComplitedSnackbar} from \"../Components/Common/ComplitedSnackbar/ComplitedSnackbar\";\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport {Login} from \"../Components/Login/Login\";\n\nfunction App() {\n    const status = useSelector<AppStateType, RequestStatusType>(state => state.app.status)\n    const isInitialized = useSelector<AppStateType, boolean>(state => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(authMe())\n    }, [])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '50%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            {status === \"failed\" && <ErrorSnackbar/>}\n            {status === \"succeeded\" && <ComplitedSnackbar/>}\n            <AppBar position={\"static\"}>\n                <AppMenu isLoggedIn={isLoggedIn}/>\n                <div className=\"progress\">{status === \"loading\" && <LinearProgress/>}</div>\n            </AppBar>\n            <Container fixed>\n                <HashRouter>\n                    <Switch>\n                        <Route exact path={\"/\"} render={() => <Todolists/>}/>\n                        <Route path={\"/login\"} render={() => <Login/>}/>\n                        <Route path={\"/404\"} render={() => <h1>404 залупа</h1>}/>\n                        <Redirect from={\"*\"} to={\"/404\"}/>\n                    </Switch>\n                </HashRouter>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {TaskActionsType, tasksReducer} from \"./task-reducer\";\r\nimport {TodolistActionsType, todolistsReducer} from \"./todolist-reducer\";\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\";\r\nimport {appReducer, AppReducerActionsType} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\n// store\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n// types\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type AppActionsType = TaskActionsType | TodolistActionsType | AppReducerActionsType\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AppActionsType>\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login_container\":\"Login_login_container__1_7Ts\",\"paper\":\"Login_paper__3SGzY\",\"item\":\"Login_item__1WDuG\",\"testData\":\"Login_testData__3PeNS\",\"title\":\"Login_title__RsGFg\",\"field\":\"Login_field__1mFjT\",\"checkbox\":\"Login_checkbox__GACxG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__9-2s4\",\"task_box\":\"Todolist_task_box__122HQ\"};"],"sourceRoot":""}